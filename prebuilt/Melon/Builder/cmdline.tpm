package Melon::Builder::cmdline;
use strict;
use warnings;#@1
my $SYS;

            sub new {
                my $class = shift;
                my %params = @_;
                my $self = bless {}, $class;
                $SYS = $params{'sys'};

                
                $self->{'_conf'} = $params{'conf'} || 0;
                $self->init(%params) if( defined( &Melon::Builder::cmdline::init ) && !$self->{'skipInit'} );
                return $self;
            }sub parse_args {#@4
    my $cmdArgs = shift;#@5
    my $argLine = join( ' ', @$cmdArgs );#@6
    my $res = {};#@7
    $argLine =~ s/--([a-zA-Z0-9_]+)/op_flag($1)/ge; # find and replace flags to have a value#@8
    $argLine =~ s/--([a-zA-Z0-9_]+) ([^" ]+)/op_space($1,$2)/ge; # fix space delimited arguments#@9
    $argLine =~ s/--([a-zA-Z0-9_]+)="(.+?)"/named_arg($res,$1,$2)/ge;#@12
    return $res;#@13
}#@14
sub named_arg {#@16
    my ( $res, $name, $val ) = @_;#@17
    if( $name eq 'skipmod' ) {#@18
        my $skip = $res->{'skipModules'} ||= [];#@19
        push( @$skip, $val );#@20
    }#@21
    if( $name eq 'force' ) {#@22
        $res->{'forceRebuild'} = 1;#@23
    }#@24
    if( $name eq 'trace' ) {#@25
        $res->{'trace'} = 1;#@26
    }#@27
    return '';#@28
}#@29
sub op_flag {#@31
    my $name = shift;#@32
    my %flags = (#@33
        force => 1,#@34
        trace => 1,#@35
        );#@36
    if( $flags{$name} ) {#@37
        return "--$name=\"1\"";#@38
    }#@39
    return "--$name";#@40
}#@41
sub op_space {#@43
    my ( $name, $val ) = @_;#@44
    return "--$name=\"$val\"";#@45
}#@46
